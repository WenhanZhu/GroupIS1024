// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GroupIS1024;
//
//    var news = News.FromJson(jsonString);

namespace GroupIS1024
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NewsFeed
    {
        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("datum")]
        public List<Feed> Feeds { get; set; }

        [JsonProperty("success")]
        public bool Success { get; set; }
    }

    public partial class Feed
    {
        [JsonProperty("author")]
        public Author Author { get; set; }

        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("date")]
        public Date Date { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("imageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("readMoreUrl")]
        public Uri ReadMoreUrl { get; set; }

        [JsonProperty("time")]
        public string Time { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public enum Author { AnkushVerma, AnmolSharma, ArnabMukherji, PragyaSwastik };

    public enum Date { The24Nov2022Thursday };

    public partial class NewsFeed
    {
        public static NewsFeed FromJson(string json) => JsonConvert.DeserializeObject<NewsFeed>(json, GroupIS1024.Converter.Settings);
    }

    //public static class Serialize1
    //{
       // public static string ToJson(this NewsFeed self) => JsonConvert.SerializeObject(self, GroupIS1024.Converter.Settings);
   // }

    internal static class Converter1
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AuthorConverter.Singleton,
                DateConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AuthorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Author) || t == typeof(Author?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Ankush Verma":
                    return Author.AnkushVerma;
                case "Anmol Sharma":
                    return Author.AnmolSharma;
                case "Arnab Mukherji ":
                    return Author.ArnabMukherji;
                case "Pragya Swastik":
                    return Author.PragyaSwastik;
            }
            throw new Exception("Cannot unmarshal type Author");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Author)untypedValue;
            switch (value)
            {
                case Author.AnkushVerma:
                    serializer.Serialize(writer, "Ankush Verma");
                    return;
                case Author.AnmolSharma:
                    serializer.Serialize(writer, "Anmol Sharma");
                    return;
                case Author.ArnabMukherji:
                    serializer.Serialize(writer, "Arnab Mukherji ");
                    return;
                case Author.PragyaSwastik:
                    serializer.Serialize(writer, "Pragya Swastik");
                    return;
            }
            throw new Exception("Cannot marshal type Author");
        }

        public static readonly AuthorConverter Singleton = new AuthorConverter();
    }

    internal class DateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Date) || t == typeof(Date?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "24 Nov 2022,Thursday")
            {
                return Date.The24Nov2022Thursday;
            }
            throw new Exception("Cannot unmarshal type Date");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Date)untypedValue;
            if (value == Date.The24Nov2022Thursday)
            {
                serializer.Serialize(writer, "24 Nov 2022,Thursday");
                return;
            }
            throw new Exception("Cannot marshal type Date");
        }

        public static readonly DateConverter Singleton = new DateConverter();
    }
}

